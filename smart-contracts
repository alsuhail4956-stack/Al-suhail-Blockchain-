// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract HealthcareRecords {
    struct Record {
        string ipfsHash;   // File stored in IPFS or off-chain storage
        uint256 timestamp;
        address uploadedBy;
    }

    struct Patient {
        string name;
        uint256 age;
        address patientAddress;
        Record[] records;
    }

    mapping(address => Patient) private patients;
    mapping(address => bool) private doctors;

    event PatientRegistered(address patient, string name, uint256 age);
    event DoctorRegistered(address doctor);
    event RecordAdded(address patient, string ipfsHash);

    modifier onlyDoctor() {
        require(doctors[msg.sender], "Only doctors can perform this action");
        _;
    }

    modifier onlyPatient(address _patient) {
        require(msg.sender == _patient, "Only patient can access own records");
        _;
    }

    function registerPatient(string memory _name, uint256 _age) public {
        patients );
        emit PatientRegistered(msg.sender, _name, _age);
    }

    function registerDoctor(address _doctor) public {
        doctors[_doctor] = true;
        emit DoctorRegistered(_doctor);
    }

    function addRecord(address _patient, string memory _ipfsHash) public onlyDoctor {
        patients[_patient].records.push(
            Record(_ipfsHash, block.timestamp, msg.sender)
        );
        emit RecordAdded(_patient, _ipfsHash);
    }

    function getPatientRecords(address _patient)
        public
        view
        onlyPatient(_patient)
        returns (Record[] memory)
    {
        return patients[_patient].records;
    }
}
